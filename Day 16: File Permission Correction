# 🛡️ Securing `/etc/hosts` with ACLs

## 📌 Problem Statement

During a recent **security audit** in Stratos DC, the Nautilus team discovered **misconfigured permissions** on the critical system file `/etc/hosts` on **App Server 3**.

The following corrections are required:

1. The file’s **user owner** and **group owner** must be `root`.
2. **Others** should have **read-only** access.
3. User **`siva`** must have **no permissions**.
4. User **`garrett`** must have **read-only** permission.

---

## ❓ Question

**How can we configure ownership and ACLs on `/etc/hosts` to meet the security requirements?**

---

## 💡 Answer

### 🔹 Step 1: Connect to App Server 3

```bash
ssh banner@stapp03
```

---

### 🔹 Step 2: Set Owner and Group to Root

```bash
sudo chown root:root /etc/hosts
```

Verify:

```bash
ls -l /etc/hosts
```

Expected:

```
-rw-r--r-- 1 root root ... /etc/hosts
```

---

### 🔹 Step 3: Set Base Permissions (Others → Read-Only)

```bash
sudo chmod 644 /etc/hosts
```

* Owner → `rw-`
* Group → `r--`
* Others → `r--`

---

### 🔹 Step 4: Remove All Permissions for `siva`

```bash
sudo setfacl -m u:siva:--- /etc/hosts
```

---

### 🔹 Step 5: Grant Read-Only Permission to `garrett`

```bash
sudo setfacl -m u:garrett:r-- /etc/hosts
```

---

### 🔹 Step 6: Verify ACLs

```bash
getfacl /etc/hosts
```

Expected output snippet:

```
# file: /etc/hosts
# owner: root
# group: root
user::rw-
user:siva:---
user:garrett:r--
group::r--
mask::r--
other::r--
```

---

## 📊 Before & After Permissions

| State       | Owner/Group     | Others    | siva              | garrett   |
| ----------- | --------------- | --------- | ----------------- | --------- |
| ❌ Before    | (misconfigured) | (unclear) | (may have access) | (no ACLs) |
| ✅ After Fix | root\:root      | read-only | no access         | read-only |

---

## 🔎 Visual Diagram of Access

```
          File: /etc/hosts

   ┌──────────┬───────────┬─────────────┬────────────┬─────────────┐
   │  Owner 👤 │  Group 👥  │   Others 🌎   │   siva 🚫   │ garrett 👓   │
   ├──────────┼───────────┼─────────────┼────────────┼─────────────┤
   │   rw-    │    r--    │     r--     │    ---     │     r--     │
   └──────────┴───────────┴─────────────┴────────────┴─────────────┘
```

---

## 🏠 Real-World Analogy

Think of `/etc/hosts` like a **locked office cabinet** 📂:

* **Owner (root 👤)** = The manager → has **full access** (read/write).
* **Group (root 👥)** = Trusted team → can **look inside but not change**.
* **Others (🌎 all employees)** = Allowed to **peek inside only**.
* **siva 🚫** = Blocked employee → cannot access the cabinet at all.
* **garrett 👓** = Temporary consultant → can **view documents but not edit**.

---

## 🎯 Outcome

* `/etc/hosts` is now **owned by root\:root**.
* **Others** have **read-only access**.
* **siva** is **explicitly denied access**.
* **garrett** has **read-only access**.

✅ Security compliance restored!

---

## 📝 Points to Remember

* `chown` → changes owner & group.
* `chmod` → sets base permissions (owner, group, others).
* `setfacl` → fine-tunes permissions for specific users.
* Always verify changes with `ls -l` and `getfacl`.
* To remove ACLs if needed:

  ```bash
  sudo setfacl -x u:siva /etc/hosts
  sudo setfacl -x u:garrett /etc/hosts
  ```

---
