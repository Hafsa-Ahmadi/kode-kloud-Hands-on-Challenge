# Day 11 ‚Äì üíæ Website Backup Bash Script

**Objective:**  
Create a bash script to automate backups of a static website on App Server 3 and copy it to Nautilus Backup Server without requiring a password.

---

## üìù Question
The production support team needs a script named `media_backup.sh` to:

1. Create a zip archive of `/var/www/html/media`  
2. Save it locally under `/backup/` on App Server 3  
3. Copy the archive to the **Nautilus Backup Server** `/backup/`  
4. Ensure passwordless copy using SSH keys  
5. Script should be executable by the respective user without `sudo`  

> **Note:** Install the `zip` package manually before running the script.

---

## üí° Answer / Steps Performed

### 1Ô∏è‚É£ Install zip package (if not already installed)
```bash
sudo yum install -y zip
````

### 2Ô∏è‚É£ Create `/scripts` directory (if not exists)

```bash
mkdir -p ~/scripts
cd ~/scripts
```

### 3Ô∏è‚É£ Create the backup script `media_backup.sh`

```bash
#!/bin/bash

# Define variables
SOURCE_DIR="/var/www/html/media"
LOCAL_BACKUP_DIR="/backup"
BACKUP_NAME="xfusioncorp_media.zip"
REMOTE_SERVER="backup@nautilus_backup_server"
REMOTE_DIR="/backup"

# Create local backup directory if it doesn't exist
mkdir -p $LOCAL_BACKUP_DIR

# Create zip archive
zip -r $LOCAL_BACKUP_DIR/$BACKUP_NAME $SOURCE_DIR

# Copy archive to Nautilus Backup Server
scp $LOCAL_BACKUP_DIR/$BACKUP_NAME $REMOTE_SERVER:$REMOTE_DIR
```

### 4Ô∏è‚É£ Make script executable

```bash
chmod +x media_backup.sh
```

### 5Ô∏è‚É£ Ensure passwordless SSH for copy

```bash
ssh-keygen -t rsa       # generate key on App Server 3
ssh-copy-id backup@nautilus_backup_server
```

### 6Ô∏è‚É£ Run the script

```bash
./media_backup.sh
```

---

## ‚úÖ Outcome

* Created **`xfusioncorp_media.zip`** backup in `/backup/`
* Successfully copied to **Nautilus Backup Server**
* Script runs without prompting for password
* Script executable by the assigned user, no `sudo` required

---

## üí° Key Learning

* Automating backups with Bash scripts ensures **reliability and consistency** ‚ö°
* Using **passwordless SSH** enables **non-interactive file transfer** üåê
* Always **test scripts locally** before scheduling cron jobs for production.


